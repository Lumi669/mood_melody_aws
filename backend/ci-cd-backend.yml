# AWSTemplateFormatVersion: "2010-09-09"
# # Parameters:
# #   BackendImageUri:
# #     Type: "AWS::SSM::Parameter::Value<String>"
# #     Description: "URI of the backend Docker image"

# Resources:
#   BackendLambdaFunction:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: MoodMelodyBackendFunction
#       Role: !GetAtt LambdaExecutionRole.Arn
#       Code:
#         ImageUri: "{{resolve:ssm:backend-ecr-uri}}"
#       PackageType: Image

#   LambdaExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - lambda.amazonaws.com
#             Action:
#               - sts:AssumeRole
#       Policies:
#         - PolicyName: LambdaExecutionPolicy
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - logs:CreateLogGroup
#                   - logs:CreateLogStream
#                   - logs:PutLogEvents
#                 Resource: "arn:aws:logs:*:*:*"

#   ApiGatewayRestApi:
#     Type: AWS::ApiGateway::RestApi
#     Properties:
#       Name: MoodMelodyBackendApi

#   ApiGatewayResourceRoot:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
#       PathPart: api
#       RestApiId: !Ref ApiGatewayRestApi

#   ApiGatewayResourceImages:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       ParentId: !Ref ApiGatewayResourceRoot
#       PathPart: images
#       RestApiId: !Ref ApiGatewayRestApi

#   ApiGatewayResourceMusic:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       ParentId: !Ref ApiGatewayResourceRoot
#       PathPart: musics
#       RestApiId: !Ref ApiGatewayRestApi

#   ApiGatewayMethodRoot:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: GET
#       ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
#       RestApiId: !Ref ApiGatewayRestApi
#       Integration:
#         IntegrationHttpMethod: POST
#         Type: AWS_PROXY
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

#   ApiGatewayMethodTest:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: GET
#       ResourceId: !Ref ApiGatewayResourceRoot
#       RestApiId: !Ref ApiGatewayRestApi
#       Integration:
#         IntegrationHttpMethod: POST
#         Type: AWS_PROXY
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

#   ApiGatewayMethodImages:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: GET
#       ResourceId: !Ref ApiGatewayResourceImages
#       RestApiId: !Ref ApiGatewayRestApi
#       Integration:
#         IntegrationHttpMethod: POST
#         Type: AWS_PROXY
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

#   ApiGatewayMethodMusic:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: GET
#       ResourceId: !Ref ApiGatewayResourceMusic
#       RestApiId: !Ref ApiGatewayRestApi
#       Integration:
#         IntegrationHttpMethod: POST
#         Type: AWS_PROXY
#         Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

#   ApiGatewayDeployment:
#     Type: AWS::ApiGateway::Deployment
#     DependsOn:
#       - ApiGatewayMethodRoot
#       - ApiGatewayMethodTest
#       - ApiGatewayMethodImages
#       - ApiGatewayMethodMusic
#     Properties:
#       RestApiId: !Ref ApiGatewayRestApi
#       StageName: prod
#       Description: "Deployment for MoodMelodyBackendApi at !{timestamp}"

#   BackendLambdaInvokePermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       Action: lambda:InvokeFunction
#       FunctionName: !Ref BackendLambdaFunction
#       Principal: apigateway.amazonaws.com
#       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"

# Outputs:
#   BackendApiUrl:
#     Description: "URL for the backend API Gateway"
#     Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
#     Export:
#       Name: BackendApiUrl

AWSTemplateFormatVersion: "2010-09-09"
Resources:
  BackendLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MoodMelodyBackendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: "{{resolve:ssm:backend-ecr-uri}}"
      PackageType: Image
      Timeout: 30
      MemorySize: 512

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::your-bucket-name/*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "arn:aws:dynamodb:*:*:table/your-table-name"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodMelodyBackendApi

  ApiGatewayResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceImages:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResourceRoot
      PathPart: images
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMusic:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResourceRoot
      PathPart: musics
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

  ApiGatewayMethodTest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceRoot
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

  ApiGatewayMethodImages:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceImages
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

  ApiGatewayMethodMusic:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceMusic
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodRoot
      - ApiGatewayMethodTest
      - ApiGatewayMethodImages
      - ApiGatewayMethodMusic
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
      Description: "Deployment for MoodMelodyBackendApi at !{timestamp}"

  BackendLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BackendLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"

Outputs:
  BackendApiUrl:
    Description: "URL for the backend API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export:
      Name: BackendApiUrl
