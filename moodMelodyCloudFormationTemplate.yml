AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  BackendImageUri:
    Type: String
    Description: URI of the Docker image for the backend
  FrontendImageUri:
    Type: String
    Description: URI of the Docker image for the frontend (if available)

Resources:
  BackendLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "mood-melody-backend"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Ref BackendImageUri
      PackageType: "Image"
      Timeout: 30
      MemorySize: 512

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"

  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "MoodMelodyApi"

  ApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: "api"
      RestApiId:
        Ref: "ApiGatewayRestApi"

  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      ResourceId:
        Ref: "ApiGatewayResource"
      RestApiId:
        Ref: "ApiGatewayRestApi"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaArn}/invocations"
            - BackendLambdaArn: !GetAtt BackendLambdaFunction.Arn

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt BackendLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"

  ApiGatewayDeploy:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"
      StageName: "prod"
    DependsOn:
      - ApiGatewayMethod

  ApiGatewayOutputs:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/MoodMelody/ApiGatewayUrl"
      Type: "String"
      Value:
        Fn::Sub: "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  FrontendLambdaFunction:
    Condition: FrontendImageAvailable
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "mood-melody-frontend"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Ref FrontendImageUri
      PackageType: "Image"
      Timeout: 30
      MemorySize: 512

  FrontendApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "MoodMelodyFrontendApi"

  FrontendApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - FrontendApiGatewayRestApi
          - RootResourceId
      PathPart: "frontend-api"
      RestApiId:
        Ref: "FrontendApiGatewayRestApi"

  FrontendApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      ResourceId:
        Ref: "FrontendApiGatewayResource"
      RestApiId:
        Ref: "FrontendApiGatewayRestApi"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FrontendLambdaArn}/invocations"
            - FrontendLambdaArn: !GetAtt FrontendLambdaFunction.Arn

  FrontendLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt FrontendLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendApiGatewayRestApi}/*/*"

Conditions:
  FrontendImageAvailable: !Not [!Equals [!Ref FrontendImageUri, ""]]

Outputs:
  BackendApiUrl:
    Value: !Ref ApiGatewayOutputs
    Export:
      Name: BackendApiUrl
  FrontendApiUrl:
    Condition: FrontendImageAvailable
    Value:
      Fn::Sub: "https://${FrontendApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/frontend-api"
    Export:
      Name: FrontendApiUrl
