AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for this Serverless application
Parameters:
  Stage:
    Description: "Envrionment/Stage, such as: dev, staging, prod"
    Type: String
  AppName:
    Type: String

  CodePipelineNames:
    Description: "CodePipeline names to watch, separated by a comma, e.g cp1,cp2,cp3"
    Type: CommaDelimitedList
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt "CopyZipsFunction.Arn"
      DestBucket: !Ref "LambdaZipsBucket"
      SourceBucket: mood-melody-deploy-status-zip-file
      Prefix: ""
      Objects:
        - dist_status_badges.zip

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::mood-melody-deploy-status-zip-file/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${LambdaZipsBucket}/*"

  StatusBadgeLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AppName}-badges-${Stage}-statusBadge"

  IamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join
            - "-"
            - - dev
              - !Sub "${AppName}-badges"
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AppName}-badges-${Stage}*:*
              - Effect: Allow
                Action:
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AppName}-badges-${Stage}*:*:*
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: !Sub "arn:aws:s3:::${AppName}-badges-images-${Stage}/*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
      Path: /
      RoleName: !Join
        - "-"
        - - !Sub "${AppName}-badges"
          - dev
          - !Ref "AWS::Region"
          - lambdaRole
  StatusBadgeLambdaFunction:
    DependsOn:
      - CopyZips
      - StatusBadgeLogGroup
      - IamRoleLambdaExecution
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "LambdaZipsBucket"
        S3Key: dist_status_badges.zip
      FunctionName: !Sub "${AppName}-badges-${Stage}-statusBadge"
      Handler: index.handler
      MemorySize: 192
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs20.x
      Timeout: 6
      Environment:
        Variables:
          BUCKET_BADGES: !Sub "${AppName}-badges-images-${Stage}"
          APP_NAME: !Ref AppName
          STAGE: !Ref Stage

  StatusBadgeEventsRuleCloudWatchEvent2:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          pipeline: !Ref CodePipelineNames
      State: ENABLED
      Description: Triggered upon status change of CodePipeline
      Name: !Sub "${AppName}-badges-status-pipeline-event-${Stage}"
      Targets:
        - Arn: !GetAtt
            - StatusBadgeLambdaFunction
            - Arn
          Id: statusBadgeCloudWatchEvent
  StatusBadgeLambdaPermissionEventsRuleCloudWatchEvent2:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt
        - StatusBadgeLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - StatusBadgeEventsRuleCloudWatchEvent2
        - Arn

  BuildBadgesImagesBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${AppName}-badges-images-${Stage}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "https://github.com"
              - "https://www.github.com"
            MaxAge: 90

  BuildBadgesImagesBucketPolicy:
    DependsOn: BuildBadgesImagesBucket
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref BuildBadgesImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${AppName}-badges-images-${Stage}/*"

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt "CopyZipsRole.Arn"
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                          Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                          / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

Outputs:
  BadgeUrl:
    Description: "URL of the CodePipeline deploy status badge"
    Value: !Sub "https://${AppName}-badges-images-${Stage}.s3.${AWS::Region}.amazonaws.com/${AppName}-${Stage}.svg"
# modified from https://aws-build-badges-deployment-bucket.s3-eu-west-1.amazonaws.com/aws_build_badges_cf_template.yml
