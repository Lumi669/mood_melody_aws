AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
  FrontendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MoodMelodyFrontendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mood-melody-aws:frontend-{{resolve:ssm:/mood-melody/frontend-timestamp}}"
      MemorySize: 512
      Timeout: 300
      Architectures:
        - x86_64
      AutoPublishAlias: green # Automatically creates an alias named 'green' for the latest version
      Events:
        HttpEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY
            ApiId: !Ref ServerlessHttpApi

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:Invoke
                  - apigateway:ManageConnections
                Resource: "*"

  # Alias for the blue environment, pointing to the latest published version
  BlueAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref FrontendLambdaFunction
      FunctionVersion: !GetAtt FrontendLambdaFunction.Version # Use the version created by AutoPublishAlias
      Name: blue

  ServerlessHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'GET,OPTIONS,POST'"
        AllowOrigins: "'*'"
      DefaultRouteSettings:
        DetailedMetricsEnabled: True

  ApiGatewayIntegrationDev:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServerlessHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MoodMelodyFrontendFunction:green"
      PayloadFormatVersion: "2.0"

  ApiGatewayIntegrationProd:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ServerlessHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MoodMelodyFrontendFunction:blue"
      PayloadFormatVersion: "2.0"

  DevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ServerlessHttpApi
      StageName: dev
      AutoDeploy: true
      StageVariables:
        lambdaAlias: green
    DependsOn:
      - ApiGatewayIntegrationDev

  ProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ServerlessHttpApi
      StageName: prod
      AutoDeploy: true
      StageVariables:
        lambdaAlias: blue
    DependsOn:
      - ApiGatewayIntegrationProd

Outputs:
  DevStageUrl:
    Description: "URL for the dev stage of the frontend API Gateway"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev"
    Export:
      Name: DevStageUrl

  ProdStageUrl:
    Description: "URL for the prod stage of the frontend API Gateway"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/prod"
    Export:
      Name: ProdStageUrl
