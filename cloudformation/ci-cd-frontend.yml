AWSTemplateFormatVersion: "2010-09-09"

Resources:
  FrontendLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MoodMelodyFrontendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mood-melody-aws:frontend-latest"
      PackageType: Image
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          NEXT_PUBLIC_API_URL_0: https://wg538k1jw3.execute-api.eu-north-1.amazonaws.com/prod/
          NEXT_PUBLIC_API_URL_1: https://wg538k1jw3.execute-api.eu-north-1.amazonaws.com/prod/api/images
          NEXT_PUBLIC_API_URL_2: https://wg538k1jw3.execute-api.eu-north-1.amazonaws.com/prod/api/musics
          NEXT_PUBLIC_API_URL_3: https://wg538k1jw3.execute-api.eu-north-1.amazonaws.com/prod/api/test

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:Invoke
                  - apigateway:ManageConnections
                Resource: "*"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodMelodyFrontendApi

  ApiGatewayResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: ""
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResourceRoot
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FrontendLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"

  ApiGatewayMethodProxy:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResourceProxy
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FrontendLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodRoot
      - ApiGatewayMethodProxy
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
      Description: "Deployment for MoodMelodyFrontendApi at !{timestamp}"

  FrontendLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FrontendLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"

Outputs:
  FrontendApiUrl:
    Description: "URL for the frontend API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export:
      Name: FrontendApiUrl
