name: Build and Push Frontend

on:
  repository_dispatch:
    types: [build-frontend]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/jinghuan-github-actions-OIDC-role
          role-session-name: OIDCSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up environment variables
        env:
          BACKEND_API_URL: ${{ github.event.client_payload.BACKEND_API_URL }}
          UNIQUE_ID: ${{ github.event.client_payload.UNIQUE_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          NEXT_PUBLIC_PERSONAL_EMAIL: ${{ secrets.NEXT_PUBLIC_PERSONAL_EMAIL }}
          NEXT_PUBLIC_PERSONAL_PHONE: ${{ secrets.NEXT_PUBLIC_PERSONAL_PHONE }}
          NEXT_PUBLIC_STAGE: dev # Explicitly set NEXT_PUBLIC_STAGE here

        run: |
          echo "BACKEND_API_URL=${BACKEND_API_URL}" >> $GITHUB_ENV
          echo "UNIQUE_ID=${UNIQUE_ID}" >> $GITHUB_ENV         
          echo "NEXT_PUBLIC_PERSONAL_EMAIL=${NEXT_PUBLIC_PERSONAL_EMAIL}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_PERSONAL_PHONE=${NEXT_PUBLIC_PERSONAL_PHONE}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_STAGE=${NEXT_PUBLIC_STAGE}" >> $GITHUB_ENV

      - name: Generate timestamp
        id: vars
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Store Timestamp in Parameter Store
        run: |
          aws ssm put-parameter --name "/mood-melody/frontend-timestamp" --value ${{ env.TIMESTAMP }} --type String --overwrite --region ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # - name: Clear Cache
      #   run: |
      #     rm -rf node_modules
      #     rm -rf .next

      - name: Confirm NEXT_PUBLIC_STAGE
        run: |
          echo "NEXT_PUBLIC_STAGE is set to: ${NEXT_PUBLIC_STAGE}"

      - name: Build and push frontend Docker image
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
          REPO_URI: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/mood-melody-aws
          BACKEND_API_URL: ${{ env.BACKEND_API_URL }}
          NEXT_PUBLIC_PERSONAL_EMAIL: ${{ env.NEXT_PUBLIC_PERSONAL_EMAIL }}
          NEXT_PUBLIC_PERSONAL_PHONE: ${{ env.NEXT_PUBLIC_PERSONAL_PHONE }}
          NEXT_PUBLIC_STAGE: ${{ env.NEXT_PUBLIC_STAGE }} # Make sure this is set

        run: |
          echo "BACKEND_API_URL from build and push frontend image step ========= ${BACKEND_API_URL}"
          docker build \
            --build-arg NEXT_PUBLIC_API_URL_0=${BACKEND_API_URL}/ \
            --build-arg NEXT_PUBLIC_API_URL_1=${BACKEND_API_URL}/api/images \
            --build-arg NEXT_PUBLIC_API_URL_2=${BACKEND_API_URL}/api/musics \
            --build-arg NEXT_PUBLIC_API_URL_3=${BACKEND_API_URL}/api/test \
            --build-arg NEXT_PUBLIC_API_URL_4=${BACKEND_API_URL}/api/sentimentanalysis \
            --build-arg NEXT_PUBLIC_API_URL_5=${BACKEND_API_URL}/api/saveuserfeedback \
            --build-arg NEXT_PUBLIC_PERSONAL_EMAIL=${NEXT_PUBLIC_PERSONAL_EMAIL} \
            --build-arg NEXT_PUBLIC_PERSONAL_PHONE=${NEXT_PUBLIC_PERSONAL_PHONE} \
            --build-arg NEXT_PUBLIC_STAGE=${NEXT_PUBLIC_STAGE} \
            -t mood-melody-aws:frontend-${TIMESTAMP} \
            -t mood-melody-aws:frontend-latest \
            ./frontend

          docker tag mood-melody-aws:frontend-${TIMESTAMP} ${REPO_URI}:frontend-${TIMESTAMP}
          docker tag mood-melody-aws:frontend-latest ${REPO_URI}:frontend-latest
          docker push ${REPO_URI}:frontend-${TIMESTAMP}
          docker push ${REPO_URI}:frontend-latest

      - name: Verify frontend image exists
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
        run: |
          aws ecr describe-images --repository-name mood-melody-aws --image-ids imageTag=frontend-${TIMESTAMP}
          aws ecr describe-images --repository-name mood-melody-aws --image-ids imageTag=frontend-latest

      - name: Signal Lambda to trigger next stage of stage Retrieve-bakendApiUrl-trigger-frontend-githubActions
        if: success()
        run: |
          echo '{"signal": true, "unique_id": "'${UNIQUE_ID}'", "status": "success"}' > signal.json
          aws s3 cp signal.json s3://mood-melody-signal-bucket/github-action-signal-${UNIQUE_ID}.json

      - name: Signal failure to S3
        if: failure()
        run: |
          echo '{"signal": true, "unique_id": "'${UNIQUE_ID}'", "status": "failure"}' > signal.json
          aws s3 cp signal.json s3://mood-melody-signal-bucket/github-action-signal-${UNIQUE_ID}.json
