name: Build and Push Frontend

on:
  repository_dispatch:
    types: [build-frontend]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment variables
        env:
          BACKEND_API_URL: ${{ github.event.client_payload.BACKEND_API_URL }}
        run: |

          echo "BACKEND_API_URL ===== , ${BACKEND_API_URL}"

          echo "FRONTEND_BACKEND_API_URL=${{ env.BACKEND_API_URL }}" >> .env

      - name: Generate timestamp
        id: vars
        # run: echo "::set-output name=timestamp::$(date +%Y%m%d%H%M%S)"
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

      - name: Build and push frontend Docker image
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
          REPO_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/mood-melody-aws

        run: |
          build_args=(
            "NEXT_PUBLIC_API_URL_0=${BACKEND_API_URL}/api/images"
            "NEXT_PUBLIC_API_URL_1=${BACKEND_API_URL}/api/musics"
            "CACHEBUST=$(date +%s)"
          )

          build_args_str=""
          for arg in "${build_args[@]}"; do
            build_args_str+=" --build-arg $arg"
          done

          docker build $build_args_str \
                      -t mood-melody-aws:frontend-${TIMESTAMP} \
                      -t mood-melody-aws:frontend-latest \
                      ./frontend

          docker tag mood-melody-aws:frontend-${TIMESTAMP} ${REPO_URI}:frontend-${TIMESTAMP}
          docker tag mood-melody-aws:frontend-latest ${REPO_URI}:frontend-latest
          docker push ${REPO_URI}:frontend-${TIMESTAMP}
          docker push ${REPO_URI}:frontend-latest

      - name: Verify backend image exists
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}
        run: |
          aws ecr describe-images --repository-name mood-melody-aws --image-ids imageTag=frontend-${TIMESTAMP}

      - name: Trigger Specific CodePipeline Stage
        if: success()
        run: |
          # Logic to trigger specific stage
          aws lambda invoke --function-name deployFrontendStageTrigger response.json
