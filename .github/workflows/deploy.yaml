name: Deploy Full-Stack App to Heroku

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to Heroku Container Registry
        run: heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Create GitHub Deployment
      - name: Create GitHub Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # The body of the POST request is passed as a JSON string in an environment variable
          INPUT_DATA: '{"ref": "${{ github.sha }}", "environment": "production", "required_contexts": []}'

      - name: Build and push backend (Flask) Docker image
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME_BACKEND }}/web ./backend
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME_BACKEND }}/web
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Release backend Docker image to Heroku app
        run: heroku container:release web -a ${{ secrets.HEROKU_APP_NAME_BACKEND }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Update GitHub Deployment Status
      - name: Update GitHub Deployment Status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.data.id }}/statuses
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_DATA: '{"state": "${{ job.status == ''success'' && ''success'' || ''failure'' }}"}'

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to Heroku Container Registry
        run: heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Build and push frontend (Next.js) Docker image
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME_FRONTEND }}/web ./frontend
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME_FRONTEND }}/web
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # New step: Retrieve backend URL and set it for the frontend app
      - name: Set Backend URL in Frontend App's Config Vars
        run: |
          BACKEND_URL=$(heroku apps:info -s -a ${{ secrets.HEROKU_APP_NAME_BACKEND }} | grep web_url | cut -d= -f2 | tr -d '[:space:]')
          heroku config:set NEXT_PUBLIC_API_URL=$BACKEND_URL -a ${{ secrets.HEROKU_APP_NAME_FRONTEND }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Release frontend Docker image to Heroku app
        run: heroku container:release web -a ${{ secrets.HEROKU_APP_NAME_FRONTEND }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
